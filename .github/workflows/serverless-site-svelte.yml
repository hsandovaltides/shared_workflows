name: svelte-static-site
# Changed 'on' to enable this workflow to be called from other workflows
on:
  workflow_call:
    inputs:
      node-version:
        description: "Node version"
        required: true
        type: string
      project-name:
        description: "Name of project in aws"
        required: true
        type: string

jobs:
  
  deploy-architecture:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEV_REGION }}
      - name: Set environment variable based on branch
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "qa" ]]; then
            echo "DEPLOY_ENV=qa" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi
      - name: use node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install modules
        run: npm install
      - name: Print Deploy
        run: ./node_modules/serverless/bin/serverless.js print --stage ${{ env.DEPLOY_ENV }}
      - name: Deploy App To Aws
        run: ./node_modules/serverless/bin/serverless.js deploy --stage ${{ env.DEPLOY_ENV }}
      
        
  deploy-project:
    needs: deploy-architecture
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_DIST_DEV: asd
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEV_REGION }}
      
      - name: Set environment variable based on branch
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo BUCKET_DEV_ID=prod-bucket-${{ inputs.project-name }}-app >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "qa" ]]; then
            echo "DEPLOY_ENV=qa" >> $GITHUB_ENV
            echo BUCKET_DEV_ID=qa-bucket-${{ inputs.project-name }}-app >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo BUCKET_DEV_ID=dev-bucket-${{ inputs.project-name }}-app >> $GITHUB_ENV
          fi
          
          
      - name: use node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      
      - name: Install modules
        run: npm install
      - name: Set Env DIST_DEV
        run: echo "CLOUDFRONT_DIST_DEV=$(aws cloudformation  describe-stacks --stack-name ${{ inputs.project-name }}-${{ env.DEPLOY_ENV }} --query 'Stacks[0].Outputs[?OutputKey==`cloudFormationWebId`].OutputValue' --output text)" >> $GITHUB_ENV
      - name: Build application
        run: npm run build
      - name: Print variables
        run: |
          echo ${{ env.BUCKET_DEV_ID }}
          echo $CLOUDFRONT_DIST_DEV
          echo "Deploying to: ${{ env.DEPLOY_ENV }}"
      - name: Deploy to S3
        run: aws s3 sync --delete ./dist/ s3://${{ env.BUCKET_DEV_ID }}
      - name: Create CloudFront invalidation
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_DEV --paths "/*"

  release-on-push:
    name: Tag Version
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-project
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
